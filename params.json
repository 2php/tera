{
  "name": "Tera",
  "tagline": "An Internet-Scale Database.",
  "body": "# Tera - An Internet-Scale Database\r\n\r\n[![Build Status](https://travis-ci.org/baidu/tera.svg?branch=master)](https://travis-ci.org/baidu/tera)\r\n[![Coverity Scan Build Status](https://scan.coverity.com/projects/10959/badge.svg)](https://scan.coverity.com/projects/tera)\r\n\r\nCopyright 2015, Baidu, Inc.\r\n\r\nTera is a high performance distributed NoSQL database, which is inspired by google's [BigTable](http://static.googleusercontent.com/media/research.google.com/zh-CN//archive/bigtable-osdi06.pdf) and designed for real-time applications. Tera can easily scale to __petabytes__ of data across __thousands__ of commodity servers. Besides, Tera is widely used in many Baidu products with varied demands，which range from throughput-oriented applications to latency-sensitive service, including web indexing, WebPage DB, LinkBase DB, etc. ([中文](readme-cn.md))\r\n\r\n## Features\r\n\r\n* Linear and modular scalability\r\n* Automatic and configurable sharding\r\n* Ranged and hashed sharding strategies\r\n* MVCC\r\n* Column-oriented storage and locality group support\r\n* Strictly consistent\r\n* Automatic failover support\r\n* Online schema change\r\n* Snapshot support\r\n* Support RAMDISK/SSD/DFS tiered cache\r\n* Block cache and Bloom Filters for real-time queries\r\n* Multi-type table support (RAMDISK/SSD/DISK table)\r\n* Easy to use [C++](doc/en/sdk_guide.md)/[Java](doc/en/sdk_guide_java.md)/[Python](doc/en/sdk_guide_python.md)/[REST-ful](doc/en/sdk_guide_http.md) API\r\n\r\n## Data model\r\n\r\nTera is the collection of many sparse, distributed, multidimensional tables. The table is indexed by a row key, column key, and a timestamp; each value in the table is an uninterpreted array of bytes.\r\n\r\n* (row:string, (column family+qualifier):string, time:int64) → string\r\n\r\nTo learn more about the schema, you can refer to [BigTable](http://static.googleusercontent.com/media/research.google.com/zh-CN//archive/bigtable-osdi06.pdf).\r\n\r\n## Architecture\r\n\r\n![架构图](https://github.com/baidu/tera/raw/master/resources/images/arch.png)\r\n\r\nTera has three major components: sdk, master and tablet servers.\r\n\r\n- __SDK__: a library that is linked into every application client to access Tera cluster.\r\n- __Master__: master is responsible for managing tablet servers and tablets, automatic load balance and garbage collection of files in filesystem.\r\n- __Tablet Server__: tablet server is the core module in tera, and it uses an __enhance__ [Leveldb](https://github.com/google/leveldb) as a basic storage engine. Tablet server manages a set of tablets, handles read/write/scan requests and schedule tablet split and merge online.\r\n\r\n## Building blocks\r\nTera is built on several pieces of open source infrastructure.\r\n\r\n- __Filesystem__ (required)\r\n\r\n\tTera uses the distributed file system to store transaction log and data files. So Tera uses an abstract file system interface, called Env, to adapt to different implementations of file systems (e.g., [BFS](https://github.com/baidu/bfs), HDFS, HDFS2, POXIS filesystem).\r\n\r\n- __Distributed lock service__ (required)\r\n\r\n\tTera relies on a highly-available and persistent distributed lock service, which is used for a variety of tasks: to ensure that there is at most one active master at any time; to store meta table's location, to discover new tablet server and finalize tablet server deaths. Tera has an adapter class to adapt to different implementations of lock service (e.g., ZooKeeper, [Nexus](https://github.com/baidu/ins))\r\n\r\n- __High performance RPC framework__ (required)\r\n\r\n\tTera is designed to handle a variety of demanding workloads, which range from throughput-oriented applications to latency-sensitive service. So Tera needs a high performance network programming framework. Now Tera heavily relies on [Sofa-pbrpc](https://github.com/baidu/sofa-pbrpc/) to meet the performance demand.\r\n\t\r\n- __Cluster management system__ (not necessary)\r\n\t\t\r\n\tA Tera cluster in Baidu typically operates in a shared pool of machines\r\nthat runs a wide variety of other distributed applications. So Tera can be deployed in a cluster management system [Galaxy](https://github.com/baidu/galaxy), which uses for scheduling jobs, managing resources on shared machines, dealing with machine failures, and monitoring machine status. Besides, Tera can also be deployed on RAW machine or in Docker container.\r\n\r\n## Documents\r\n\r\n* [Developer Doc](doc/README.md)\r\n\r\n## Quick start\r\n* __How to build__\r\n\r\n\tUse sh [./build.sh](BUILD) to build Tera.\r\n\r\n* __How to deploy__\r\n\r\n\t[Pseudo Distributed Mode](doc/onebox.md)\r\n\r\n\t[Build on Docker](example/docker)\r\n\t\r\n* __How to access__\r\n\t\r\n\t[teracli](doc/teracli.md)\r\n\t\r\n\t[API](doc/en/sdk_guide.md)\r\n\r\n## Contributing to Tera  \r\nContributions are welcomed and greatly appreciated. See [Contributions](doc/contributor.md) for more details.\r\n\r\n## Follow us\r\nTo join us, please send resume to {dist-lab, tera_dev, opensearch} at baidu.com.\r\n\r\n",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}